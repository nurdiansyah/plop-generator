import { IdParams, DataResponse, Pagination, PaginationOptions, getLogger } from "@deboxsoft/module-core";
import {
  {{ pascalCase  model }}Filter,
  {{ pascalCase  model }}Input,
  {{ pascalCase  model }}CreateResponse,
  {{ pascalCase  model }}UpdateResponse,
  {{ pascalCase  model }}UpdateInput,
  {{ pascalCase  model }},
  {{ pascalCase  model }}RemoveResponse,
  get{{ pascalCase  model }}Service,
  getModuleApiRoute
} from "@deboxsoft/{{ kebabCase  projectName }}-api";
import { FastifyInstance } from "fastify";
import { {{ pascalCase  projectName }}ServerApiOptions } from "./types.js";
import { {{ pascalCase  model }}ServiceServer } from "../services/index.js";

export const create{{ pascalCase  model }}Route = (route: FastifyInstance<any>, options: {{ pascalCase  projectName }}ServerApiOptions) => {
  const {{ camelCase  model }}Service = get{{ pascalCase  model }}Service<{{ pascalCase  model }}ServiceServer>();
  const apiPath = `/${options.apiPath}/${getModuleApiRoute().{{ camelCase  model }}Route}`;
  const logger = getLogger();
  logger.debug(`create route '${apiPath}'`);
  route.post(apiPath, {}, async (request, reply): Promise<{{ pascalCase  model }}CreateResponse | void> => {
    try {
      const input = request.body as {{ pascalCase  model }}Input;
      logger.debug("create{{ pascalCase  model }} %o", input);
      return await {{ camelCase  model }}Service.create(input);
    } catch (e) {
      logger.debug(`[ERROR] create{{ pascalCase  model }}: %o`, e);
      reply.expectationFailed(e?.message);
    }
  });
  route.put(`${apiPath}/:id`, {}, async (request, reply): Promise<{{ pascalCase  model }}UpdateResponse | void> => {
    try {
      const { id } = request.params as IdParams;
      const input = request.body as {{ pascalCase  model }}UpdateInput;
      logger.debug("update{{ pascalCase  model }} id %s", id);
      return await {{ camelCase  model }}Service.update(id, input);
    } catch (e) {
      logger.debug("[Error] update{{ pascalCase  model }} %o", e);
      reply.expectationFailed(e?.message);
    }
  });
  route.delete(`${apiPath}/:id`, {}, async (request, reply): Promise<{{ pascalCase  model }}RemoveResponse | void> => {
    try {
      const { id } = request.params as IdParams;
      logger.debug("remove{{ pascalCase  model }} %s", id);
      return await {{ camelCase  model }}Service.remove(id);
    } catch (e) {
      logger.debug("[ERROR] remove{{ pascalCase  model }} %o", e);
      reply.expectationFailed(e?.message);
    }
  });
  route.get(apiPath, {}, async (request, reply): Promise<DataResponse<{{ pascalCase  model }}[]> | void> => {
    try {
      const filter = request.params as {{ pascalCase  model }}Filter;
      logger.debug("find{{ pascalCase  model }} '%o'", filter);
      const data = await {{ camelCase  model }}Service.find(filter);
      return { data, meta: {} };
    } catch (e) {
      logger.debug("[ERROR] find{{ pascalCase  model }} %o", e);
      reply.expectationFailed(e?.message);
    }
  });
  route.post(`${apiPath}/page`, {}, async (request, reply): Promise<Pagination<{{ pascalCase  model }}Filter> | void> => {
    try {
      const opts = request.body as PaginationOptions<{{ pascalCase  model }}Filter>;
      logger.debug("find{{ pascalCase  model }}Page '%o'", opts);
      return await {{ camelCase  model }}Service.findPage(opts);
    } catch (e) {
      logger.debug("[ERROR] find{{ pascalCase  model }}Page %o", e);
      reply.expectationFailed(e?.message);
    }
  });
  route.get(`${apiPath}/:id`, {}, async (request, reply): Promise<DataResponse<{{ pascalCase  model }} | undefined> | void> => {
    try {
      const { id } = request.params as IdParams;
      logger.debug("find{{ pascalCase  model }}ById '%s'", id);
      const {{ camelCase  model }} = await {{ camelCase  model }}Service.findById(id);
      return {
        data: {{ camelCase  model }},
        meta: {}
      };
    } catch (e) {
      logger.debug("[ERROR] find{{ pascalCase  model }}ById %o", e);
      reply.expectationFailed(e?.message);
    }
  });
};
