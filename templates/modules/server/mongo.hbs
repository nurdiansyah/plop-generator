import { Collection, Db } from "mongodb";
import { {{ pascalCase model }}Repo, {{ constantCase model }}_REPO_KEY } from "../{{ pascalCase model }}Repo";
import {
  {{ pascalCase model }},
  {{ pascalCase model }}Error,
  {{ pascalCase model }}CreateDataInput,
  {{ pascalCase model }}UpdateDataInput,
  {{ pascalCase model }}Params
} from "@deboxsoft/{{ kebabCase moduleName }}-api";

import { Container, PageCursorResult } from "@deboxsoft/module-core";
import { BaseRepository, getMongoDb, paginationCursor } from "@deboxsoft/module-mongo";

export const create{{ pascalCase model }}Repo = () => {
  const db = getMongoDb();
  const {{ camelCase model }}Repo = new {{ pascalCase model }}Collection(db);
  Container.set({{ constantCase model }}_REPO_KEY, {{ camelCase model }}Repo);
  return {{ camelCase model }}Repo;
};

export class {{ pascalCase model }}Collection extends BaseRepository implements {{ pascalCase model }}Repo {
  collection: Collection;
  constructor(db: Db) {
    super();
    this.collection = db.collection("{{ pascalCase model }}");
  }

  async create(input: {{ pascalCase model }}CreateInput) {
    try {
      const metadata = await this.collection.insertOne(this._parseDataInput(input));
      if (metadata.result.ok === 1) {
        return { metadata, data: metadata.insertedId };
      }
      throw new {{ pascalCase model }}Error("{{ constantCase model }}_CREATE_FAILED");
    } catch (e) {
      if (e.code === 11000) {
        throw new {{ pascalCase model }}Error("{{ constantCase model }}_DUPLICATE", e.keyValue._id);
      }
      throw e;
    }
  }

  async update(id, input: {{ pascalCase model }}UpdateDataInput) {
    const metadata = await this.collection.updateOne(
      { _id: id },
      { $set: input }
    );
    return { metadata, data: metadata.result.ok === 1 };
  }

  async remove(id: string | string[]) {
    try {
      if (Array.isArray(id)) {
        const metadata = await this.collection.deleteMany({ _id: { $in: id } });
        return { metadata, data: metadata.result.ok === 1 };
      }
      const metadata = await this.collection.deleteOne({ _id: id });
      return { metadata, data: metadata.result.ok === 1 };
    } catch (e) {
      throw e;
    }
  }

  find(query): Promise<{{ pascalCase model }}[]> {
    return this.collection
      .find(query, { sort: { _id: 1 } })
      .map(this._parseDataOutput)
      .toArray();
  }

  findPage( params: {{ pascalCase model }}Params = { filter: {}, pageCursor: {} }, options?: Record<string, any>): Promise<PageCursorResult<{{ pascalCase model }}>> {
    const query = params.filter;
    return paginationCursor.find(this.collection, {
      query,
      ...params.pageCursor
    });
  }


  findById(id: string): Promise<{{ pascalCase model }} | undefined> {
    return this.collection.findOne({ _id: id }).then(this._parseDataOutput);
  }
}
