import type { GraphqlSchemaModule } from "@deboxsoft/module-graphql";
import { {{ pascalCase  model }}Event } from "@deboxsoft/{{ kebabCase  moduleName }}-api";
import { gql } from "@deboxsoft/module-graphql";
import { get{{ pascalCase  model }}ServiceServer } from "../services";

export const create{{ pascalCase  model }}Schema: GraphqlSchemaModule = () => {
  const {{ camelCase  model }}Service = get{{ pascalCase  model }}ServiceServer();
  return {
    typeDef: gql`
      type {{ pascalCase  model }} {
        id: ID!
      }

      input {{ pascalCase  model }}Input {
      }

      type {{ pascalCase model }}PageResult {
        data: [{{ pascalCase model }}]
        pageInfo: PageCursorInfo
      }

      input {{ pascalCase model }}Filter {
      }

      input {{ pascalCase model }}Params {
        filter: {{ pascalCase model }}Filter
        pageCursor: PageCursorParams
      }

      extend type Query {
        find{{ pascalCase  model }}(filter: {{ pascalCase model }}Filter): [{{ pascalCase  model }}]
        find{{ pascalCase  model }}Page(params: {{ pascalCase  model }}Params): {{ pascalCase  model }}PageResult
        find{{ pascalCase  model }}ById(id: ID!): {{ pascalCase  model }}
      }

      extend type Mutation {
        create{{ pascalCase  model }}(input: {{ pascalCase  model }}Input!): String
        update{{ pascalCase  model }}(id: ID!, input: {{ pascalCase  model }}Input!): Boolean
        remove{{ pascalCase  model }}(id: ID!): Boolean
      }

      extend type Subscription {
        {{ camelCase  model }}Created: {{ pascalCase  model }}
        {{ camelCase  model }}Updated: [{{ pascalCase  model }}]
        {{ camelCase  model }}Removed: ID!
      }
    `,
    resolvers: {
      Query: {
        find{{ pascalCase  model }}: (_, { filter }) => {
          return {{ camelCase  model }}Service.find(filter);
        },
        find{{ pascalCase  model }}Page: (_, { params }) => {
          return {{ camelCase  model }}Service.findPage(params);
        },
        find{{ pascalCase  model }}ById: (_, { id }) => {
          return {{ camelCase  model }}Service.findById(id);
        },
      },
      Mutation: {
        create{{ pascalCase  model }}: (_, { input }) => {
          return {{ camelCase  model }}Service.create(input);
        },
        update{{ pascalCase  model }}: (_, { id, input }) => {
          return {{ camelCase  model }}Service.update(id, input);
        },
        remove{{ pascalCase  model }}: (_, { id }) => {
          return {{ camelCase  model }}Service.remove(id);
        }
      },
      Subscription: {
        {{ camelCase  model }}Created: {
          subscribe: (_, __, { pubsub }) => {
            return pubsub.subscribe({{ pascalCase  model }}Event.created);
          }
        },
        {{ camelCase  model }}Updated: {
          subscribe: (_, __, { pubsub }) => {
            return pubsub.subscribe({{ pascalCase  model }}Event.updated);
          }
        },
        {{ camelCase  model }}Removed: {
          subscribe: (_, __, { pubsub }) => {
            return pubsub.subscribe({{ pascalCase  model }}Event.removed);
          }
        }
      }
    }
  };
};
