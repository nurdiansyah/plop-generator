import { DeboxError, getConfig } from "@deboxsoft/module-core";
import Mustache from "mustache";

export type {{ pascalCase model }}CodeError = keyof typeof codeMessageDefault;
const codeMessageDefault = {
  {{ constantCase model }}_DUPLICATE: "{{ camelCase model }} id `\{{id}}` already exist.",
  {{ constantCase model }}_NOT_FOUND: "{{ camelCase model }} id `\{{id}} not found.`",
  {{ constantCase model }}_CREATE_FAILED: "create {{ camelCase model }} id `\{{id}}` failed.",
  {{ constantCase model }}_UPDATE_FAILED: "update {{ camelCase model }} id `\{{id}}` failed.",
  {{ constantCase model }}_REMOVE_FAILED: "remove {{ camelCase model }} id `\{{id}}` failed."
};

export class {{ pascalCase model }}Error extends DeboxError {
  indexes: number[];
  constructor(code: {{ pascalCase model }}CodeError, args: Record<string, any> = {}) {
    super();
    try {
      const messages = { ...codeMessageDefault, ...(getConfig().get("app:{{ kebabCase module }}:errors") || {}) };
      this.message = Mustache.render(messages[code], { id: args.id });
      this.code = code;
      this.indexes = args.indexes;
    } catch (ignore) {}
  }
}
