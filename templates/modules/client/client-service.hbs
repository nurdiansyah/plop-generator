import {
  {{ pascalCase  model }},
  {{ pascalCase  model }}Filter,
  {{ pascalCase  model }}CreateInput,
  {{ pascalCase  model }}UpdateInput,
  {{ pascalCase  model }}Params
} from "@deboxsoft/{{ kebabCase  moduleName }}-api";
import { Container } from "@deboxsoft/module-core";
import { FetchGraphql } from "@deboxsoft/module-graphql";
import { SubscriptionClient } from "graphql-subscriptions-client";
import { {{ pascalCase  moduleName }}ClientConfig, ObserverSubscription } from "../types";

import {
  Create{{ pascalCase  model }}Mutation,
  Remove{{ pascalCase  model }}Mutation,
  Update{{ pascalCase  model }}Mutation,
  Find{{ pascalCase  model }}Query,
  Find{{ pascalCase  model }}PageQuery,
  Find{{ pascalCase  model }}ByIdQuery,
  {{ pascalCase  model }}CreatedSubs,
  {{ pascalCase  model }}UpdatedSubs,
  {{ pascalCase  model }}RemovedSubs
} from "../graphql";
import { PageCursorResult } from "@deboxsoft/module-client";

interface Options extends {{ pascalCase  moduleName }}ClientConfig {}

const createInputDefault: Partial<{{ pascalCase  model }}Input> = {};
const KEY = Symbol("{{ kebabCase  model }}-context");
export const create{{ pascalCase  model }}Service = (options: Options) => {
    if (Container.has(KEY)) {
      return get{{ pascalCase model }}Service();
    }
    const {{ camelCase  model }}Service = new {{ pascalCase  model }}ServiceClient(options);
    Container.set(KEY, {{ camelCase model }}Service);
    return {{ camelCase  model }}Service;
  };

export const get{{ pascalCase  model }}Service = () => Container.get<{{ pascalCase  model }}ServiceClient>(KEY);
export class {{ pascalCase  model }}ServiceClient implements {{ pascalCase  model }}ServiceClient {
  fetchGraphqlWS: SubscriptionClient;
  fetchGraphql: FetchGraphql;
  subscribers: any = {};

  constructor({ fetchGraphql, fetchGraphqlWS }: Options) {
    this.fetchGraphql = fetchGraphql;
    this.fetchGraphqlWS = fetchGraphqlWS;
  }

  create(input: {{ pascalCase  model }}CreateInput) {
    input = { ...createInputDefault, ...input };
    return this.fetchGraphql(Create{{ pascalCase  model }}Mutation, { variables: { input } }).then((result) => {
    return result.create{{ pascalCase  model }};
    });
  }

  update(id: string, input: {{ pascalCase  model }}UpdateInput) {
    return this.fetchGraphql(Update{{ pascalCase  model }}Mutation, { variables: { id, input } }).then((result) => result.update{{ pascalCase  model }});
  }

  remove(id: string) {
    const variables = { id };
    return this.fetchGraphql(Remove{{ pascalCase  model }}Mutation, { variables }).then((result) => result.remove{{ pascalCase  model }});
  }

  findById(id: string): Promise<{{ pascalCase  model }} | undefined> {
    return this.fetchGraphql(Find{{ pascalCase  model }}ByIdQuery, { variables: { id } }).then((result) => result.find{{ pascalCase  model }}ById);
  }

  find(filter?: {{ pascalCase  model }}Filter): Promise<{{ pascalCase  model }}[]> {
    return this.fetchGraphql(Find{{ pascalCase  model }}Query, { variables: { filter } }).then((result) => result.find{{ pascalCase  model }} || []);
  }

  findPage(params?: {{ pascalCase  model }}Params): Promise<PageCursorResult<{{ pascalCase  model }}>> {
    return this.fetchGraphql(Find{{ pascalCase  model }}PageQuery, { variables: { params } }).then((result) => result.find{{ pascalCase  model }}Page || []);
  }

  on{{ pascalCase  model }}Created({ next, complete, error }: ObserverSubscription) {
    if (!this.subscribers.created) {
      this.subscribers.created = this.fetchGraphqlWS
        .request({
          query: {{ pascalCase  model }}CreatedSubs
        })
        .subscribe({
          next: ({ data }) => next(data.{{ camelCase  model }}Created),
          error,
          complete
        });
    }
    return () => {
      this.subscribers.created.unsubscribe();
      this.subscribers.created = undefined;
    };
  }

  on{{ pascalCase  model }}Updated({ next, complete, error }: ObserverSubscription) {
    if (!this.subscribers.updated) {
      this.subscribers.updated = this.fetchGraphqlWS
        .request({
          query: {{ pascalCase  model }}UpdatedSubs
        })
        .subscribe({
          next: ({ data }) => next(data.{{ camelCase  model }}Updated),
          error,
          complete
        });
    }
    return () => {
      this.subscribers.updated.unsubscribe();
      this.subscribers.updated = undefined;
    };
  }

  on{{ pascalCase  model }}Removed({ next, complete, error }: ObserverSubscription) {
    if (!this.subscribers.removed) {
      this.subscribers.removed = this.fetchGraphqlWS
        .request({
          query: {{ pascalCase  model }}RemovedSubs
        })
        .subscribe({
          next: ({ data }) => next(data.{{ camelCase  model }}Removed),
          error,
          complete
        });
    }
    return () => {
      this.subscribers.removed.unsubscribe();
      this.subscribers.removed = undefined;
    };
  }
}
