import type { PageCursorInfo } from "@deboxsoft/module-core";
import type { {{ pascalCase  model }}, {{ pascalCase  model }}Filter, {{ pascalCase  model }}Input, {{ pascalCase  model }}Params } from "@deboxsoft/{{ kebabCase  moduleName }}-api";
import type { {{ pascalCase  moduleName }}ClientConfig, ItemDataOptions } from "../types";

import { create{{ pascalCase  model }}Service } from "../services";
import { writable, get, Readable, Writable } from "svelte/store";
import { getContext, setContext } from "svelte";

interface Options extends {{ pascalCase  moduleName }}ClientConfig {}

export interface {{ pascalCase  model }}Context {
  create(input: {{ pascalCase  model }}Input): Promise<void>;
  update(id: string, input: {{ pascalCase  model }}Input, options?: ItemDataOptions): Promise<void>;
  remove(id: string, options?: ItemDataOptions): Promise<void>;
  findById(id: string): Promise<{{ pascalCase  model }} | undefined>;
  find(filter?: {{ pascalCase  model }}Filter): Promise<{{ pascalCase  model }}[]>;
  findPage(params?: {{ pascalCase  model }}Params): Promise<void>;
  get{{ pascalCase  model }}(id: string): {{ pascalCase  model }} | undefined;
  {{ camelCase  model }}Store: Writable<{{ pascalCase  model }}[]>;
  {{ camelCase  model }}PageInfo: Readable<PageCursorInfo>;
}
const KEY = Symbol("{{ kebabCase  model }}-context");
export const create{{ pascalCase  model }}Context = (options: Options): {{ pascalCase  model }}Context => {
  const {{ camelCase  model }}Service = create{{ pascalCase  model }}Service(options);
  const {{ camelCase  model }}Store = writable<{{ pascalCase  model }}[]>([]);
  const {{ camelCase  model }}PageInfo = writable<PageCursorInfo>({});

  // subscription
  {{ camelCase  model }}Service.on{{ pascalCase  model }}Created({
    next: ({{ camelCase  model }}) => {
      {{ camelCase  model }}Store.update((_) => {
        return [{{ camelCase  model }}, ..._];
      });
    }
  });

  {{ camelCase  model }}Service.on{{ pascalCase  model }}Updated({
    next: ({{ camelCase  model }}) => {
      {{ camelCase  model }}Store.update((${{ camelCase  model }}Store) => {
        const i = ${{ camelCase  model }}Store.findIndex((_) => _.id === {{ camelCase  model }}.id);
        if (i > -1) {
          ${{ camelCase  model }}Store[i] = { ...${{ camelCase  model }}Store[i], ...{{ camelCase  model }} };
        }
        return ${{ camelCase  model }}Store;
      });
    }
  });

  {{ camelCase  model }}Service.on{{ pascalCase  model }}Removed({
    next: (id) => {
      {{ camelCase  model }}Store.update((${{ camelCase  model }}Store) => {
        const i = ${{ camelCase  model }}Store.findIndex((_) => _.id === id);
        if (i > -1) {
          ${{ camelCase  model }}Store.splice(i, 1);
        }
        return ${{ camelCase  model }}Store;
      });
    }
  });
  const {{ camelCase  model }}Context: {{ pascalCase  model }}Context = {
    {{ camelCase  model }}Store,
    {{ camelCase  model }}PageInfo,
    create: (input: {{ pascalCase  model }}Input): Promise<void> => {
      return {{ camelCase  model }}Service.create(input).catch((reason) => {
        if (reason?.response?.errors[0]?.message) {
          const message = reason.response.errors[0].message;
          throw new Error(message);
        }
        console.error(reason);
      });
    },
    update: (id: string, input: {{ pascalCase  model }}Input, { index }: { index?: number } = {}): Promise<void> => {
      return {{ camelCase  model }}Service.update(id, input).catch((reason) => {
        if (reason?.response?.errors[0]?.message) {
          const message = reason.response.errors[0].message;
          throw new Error(message);
        }
        console.error(reason);
      });
    },
    remove: (id: string, { index }: { index?: number } = {}): Promise<void> => {
      return {{ camelCase  model }}Service.remove(id).catch((reason) => {
        if (reason?.response?.errors[0]?.message) {
          const message = reason.response.errors[0].message;
          throw new Error(message);
        }
        console.error(reason);
      });
    },
    find: (filter) => {{ camelCase  model }}Service.find(filter),
    findPage: (params: {{ pascalCase  model }}Params) =>
      {{ camelCase  model }}Service.findPage(params).then((result) => {
        const data = result.data || [];
        const pageInfo = result.pageInfo;
        {{ camelCase  model }}Store.update((${{ camelCase  model }}Store) => {
          if (pageInfo?.hasPrevious) {
            return [...data, ...${{ camelCase  model }}Store];
          }
          return [...${{ camelCase  model }}Store, ...data];
        });
        {{ camelCase  model }}PageInfo.set(pageInfo);
      }),
    findById: (id: string) => {
      return {{ camelCase  model }}Service.findById(id);
    },
    get{{ pascalCase  model }}: (id: string): {{ pascalCase  model }} | undefined => {
      const {{ camelCase  model }}Arr = get({{ camelCase  model }}Store);
      const i = {{ camelCase  model }}Arr.findIndex((_) => _.id === id);
      return {{ camelCase  model }}Arr[i];
    }
  };
  setContext<{{ pascalCase  model }}Context>(KEY, {{ camelCase  model }}Context);
  return {{ camelCase  model }}Context;
};

export const get{{ pascalCase  model }}Context = () => getContext<{{ pascalCase  model }}Context>(KEY);
