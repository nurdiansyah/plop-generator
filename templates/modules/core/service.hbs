import { {{ pascalCase model }}, {{ pascalCase model }}Filter, {{ pascalCase model }}Input, {{ pascalCase model }}UpdateInput } from "../models";
import {
  type ID,
  Container,
  Pagination,
  PaginationOptions,
  CreateResult,
  UpdateResult,
  RemoveResult
} from "@deboxsoft/module-core";

export const {{ pascalCase model }}Event = {
  onBeforeCreate: "{{ kebabUpperCase model }}-BEFORE-CREATE",
  onAfterCreate: "{{ kebabUpperCase model }}-AFTER-CREATE",
  onBeforeUpdate: "{{ kebabUpperCase model }}-BEFORE-UPDATE",
  onAfterUpdate: "{{ kebabUpperCase model }}-AFTER-UPDATE-EVENT",
  onBeforeRemove: "{{ kebabUpperCase model }}-BEFORE-REMOVE-EVENT",
  onAfterRemove: "{{ kebabUpperCase model }}-AFTER-REMOVE-EVENT"
};
export const {{ constantCase model }}_SERVICE_KEY = "{{ kebabUpperCase  model }}-SERVICE-KEY";
export const get{{ pascalCase model }}Service = <S extends {{ pascalCase model }}Service = {{ pascalCase model }}Service>() => Container.get<S>({{ constantCase model }}_SERVICE_KEY);
export const has{{ pascalCase model }}Service = () => Container.has({{ constantCase model }}_SERVICE_KEY);
export interface {{ pascalCase model }}Service {
  create(input: {{ pascalCase model }}Input): Promise<CreateResult>;
  update(id: ID, input: Partial<{{ pascalCase model }}Input>): Promise<UpdateResult>;
  remove(id: ID): Promise<RemoveResult>;
  findById(id: ID): Promise<{{ pascalCase model }} | undefined>;
  find(filter?: Record<string, any>): Promise<{{ pascalCase model }}[]>;
  findPage(options?: PaginationOptions<{{ pascalCase model }}Filter>): Promise<Pagination<{{ pascalCase model }}>>;
}
